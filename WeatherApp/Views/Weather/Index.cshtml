@model WeatherApp.Models.WeatherModel

@functions {
    public string toTitleCase(string str)
    {
        if (string.IsNullOrEmpty(str))
            return str;

        return System.Globalization.CultureInfo.CurrentCulture.TextInfo.ToTitleCase(str.ToLower());
    }
}

@{
    ViewData["Title"] = "Weather Data";
}

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>@ViewData["Title"]</title>
    <link href="https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/css/bootstrap.min.css" rel="stylesheet">
    <style>
        .table-responsive {
            max-height: 400px; /* Adjust height as needed */
            overflow-y: auto;
            margin-bottom: 20px; /* Add margin at the bottom of the table */
        }

            .table-responsive thead th {
                position: sticky;
                top: 0;
                background-color: #fff; /* Ensure the header has a background color */
                z-index: 1; /* Ensure the header is above table body */
            }
    </style>
</head>
<body>
    <div class="container mt-4">
        <div class="row">
            <div class="col-md-8 offset-md-2">
                <div class="card mb-4">
                    <div class="card-header">
                        <h2>Configure Weather</h2>
                    </div>
                    <div class="card-body">
                        @if (TempData["ErrorMessage"] != null)
                        {
                            <div class="alert alert-danger">
                                @TempData["ErrorMessage"]
                            </div>
                        }

                        <form asp-action="SetWeatherConfig" method="post" id="weatherForm" novalidate>
                            <div class="form-group">
                                <label for="location">Location (City Name):</label>
                                <input type="text" id="location" name="location" asp-for="Location" class="form-control" required />
                                <span id="locationError" class="text-danger"></span>
                            </div>
                            <div class="form-group">
                                <label for="updateInterval">Update Interval (minutes):</label>
                                <input type="number" id="updateInterval" name="updateInterval" asp-for="UpdateInterval" class="form-control" required />
                                <span id="updateIntervalError" class="text-danger"></span>
                            </div>
                            <div class="form-group">
                                <label for="numberOfDays">Number of Days for Recorded Historical Data:</label>
                                <input type="number" id="numberOfDays_recorded" name="Recorded_History_Days" asp-for="Recorded_History_Days" class="form-control" required />
                                <span id="numberOfDaysRecordedError" class="text-danger"></span>
                            </div>
                            <div class="form-group">
                                <label for="numberOfDays">Number of Days for Historical Data:</label>
                                <input type="number" id="numberOfDays" name="Historical_Data_Days" asp-for="Historical_Data_Days" class="form-control" required />
                                <span id="numberOfDaysError" class="text-danger"></span>
                            </div>
                            <br />
                            <button type="submit" class="btn btn-primary btn-block">Set Weather Configuration</button>
                        </form>
                    </div>
                </div>
            </div>
        </div>

        @if (Model != null)
        {
            <div class="row mt-4">
                <div class="col-md-8 offset-md-2">
                    <div class="card mb-4">
                        <div class="card-header">
                            <h2>Current Weather for @toTitleCase(Model.Location)</h2>
                        </div>
                        <div class="card-body">
                            <p>Temperature: <span id="currentTemperature">@Model.CurrentTemperature</span> °C</p>
                            <p>Description: <span id="currentDescription">@toTitleCase(Model.CurrentDescription)</span></p>
                            <p>Date: <span id="currentDate">@Model.CurrentDate.ToString("yyyy-MM-dd")</span></p>
                            <p>Time: <span id="currentTime">@Model.CurrentDate.ToString("HH:mm")</span></p>

                        </div>
                    </div>
                </div>
            </div>

            @if (Model.Recorded_History != null && Model.Recorded_History_Days != 0)
            {
                <div class="row mt-4">
                    <div class="col-md-8 offset-md-2">
                        <div class="card mb-4">
                            <div class="card-header">
                                <h2>
                                    Recorded Weather Data at @toTitleCase(Model.Location) for past @Model.Recorded_History_Days days
                                    
                                </h2>
                            </div>
                            <div class="card-body">
                                <div class="table-responsive">
                                    <table class="table table-striped">
                                        <thead class="thead-dark">
                                            <tr>
                                                <th>Date</th>
                                                <th>Time</th>
                                                <th>Temperature (°C)</th>
                                                <th>Description</th>
                                                <th>Wind Speed (m/s)</th>
                                            </tr>
                                        </thead>
                                        <tbody id="recordedDataBody">
                                            @foreach (var data in Model.Recorded_History.Records)
                                            {
                                                <tr>
                                                    <td>@data.Date.ToString("yyyy-MM-dd")</td>
                                                    <td>@data.Timestamp.ToString("HH:mm")</td>
                                                    <td>@data.Temperature</td>
                                                    <td>@data.Description</td>
                                                    <td>@data.WindSpeed</td>
                                                </tr>
                                            }
                                        </tbody>
                                    </table>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            }
            @if (Model.Historical_data != null && Model.Historical_Data_Days != 0)
            {
                <div class="row mt-4">
                    <div class="col-md-8 offset-md-2">
                        <div class="card mb-4">
                            <div class="card-header">
                                <h2>
                                    Historical Weather Data at @toTitleCase(Model.Location) for past @Model.Historical_Data_Days days

                                </h2>
                            </div>
                            <div class="card-body">
                                <div class="table-responsive">
                                    <table class="table table-striped">
                                        <thead class="thead-dark">
                                            <tr>
                                                <th>Date</th>
                                                <th>Temperature (°C)</th>
                                                <th>Description</th>
                                                <th>Wind Speed (m/s)</th>
                                            </tr>
                                        </thead>
                                        <tbody id="recordedDataBody">
                                            @foreach (var data in Model.Historical_data.Records)
                                            {
                                                <tr>
                                                    <td>@data.Date.ToString("yyyy-MM-dd")</td>
                                                    <td>@data.Temperature</td>
                                                    <td>@data.Description</td>
                                                    <td>@data.WindSpeed</td>
                                                </tr>
                                            }
                                        </tbody>
                                    </table>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            }
        }
    </div>

    @section Scripts {
        <script src="https://cdnjs.cloudflare.com/ajax/libs/microsoft-signalr/5.0.9/signalr.min.js"></script>
        <script type="text/javascript">
            $(document).ready(function () {
                function clearErrorMessage(inputId, errorId) {
                    $(inputId).on('input', function () {
                        $(errorId).text('');
                    });
                }

                clearErrorMessage('#location', '#locationError');
                clearErrorMessage('#updateInterval', '#updateIntervalError');
                clearErrorMessage('#numberOfDays_recorded', '#numberOfDaysRecordedError');
                clearErrorMessage('#numberOfDays', '#numberOfDaysError');

                $('#weatherForm').on('submit', function (event) {
                    let isValid = true;

                    const location = $('#location').val().trim();
                    const updateInterval = $('#updateInterval').val().trim();
                    const numberOfDaysRecorded = $('#numberOfDays_recorded').val().trim();
                    const numberOfDays = $('#numberOfDays').val().trim();

                    // Validate Location
                    if (location === '') {
                        $('#locationError').text('Location cannot be empty.');
                        isValid = false;
                    } else {
                        $('#locationError').text('');
                    }

                    // Validate Update Interval
                    if (updateInterval === '') {
                        $('#updateIntervalError').text('Update interval cannot be empty.');
                        isValid = false;
                    } else if (!Number.isInteger(Number(updateInterval)) || updateInterval <= 0) {
                        $('#updateIntervalError').text('Update interval must be a positive integer greater than 0.');
                        isValid = false;
                    } else {
                        $('#updateIntervalError').text('');
                    }

                    // Validate Number of Days Recorded
                    if (!Number.isInteger(Number(numberOfDaysRecorded)) || numberOfDaysRecorded < 0) {
                        $('#numberOfDaysRecordedError').text('Number of Days for Recorded Historical Data must be a valid number and cannot be negative.');
                        isValid = false;
                    } else {
                        $('#numberOfDaysRecordedError').text('');
                    }

                    // Validate Number of Days for Forecast Data
                    if (!Number.isInteger(Number(numberOfDays)) || numberOfDays < 0) {
                        $('#numberOfDaysError').text('Number of Days for Historical Data must be a valid number and cannot be negative.');
                        isValid = false;
                    } else {
                        $('#numberOfDaysError').text('');
                    }

                    if (!isValid) {
                        event.preventDefault(); // Prevent form submission if validation fails
                    }
                });
            });

            const connection = new signalR.HubConnectionBuilder()
                .withUrl("/weatherHub")
                .build();

            connection.on("ReceiveWeatherUpdate", function (weatherModel) {
                document.getElementById("currentTemperature").innerText = weatherModel.currentTemperature;
                document.getElementById("currentDescription").innerText = weatherModel.currentDescription;

                document.getElementById("currentDate").innerText = new Date(weatherModel.currentDate).toISOString().split('T')[0];
                document.getElementById("currentTime").innerText = new Date(weatherModel.currentDate).toLocaleTimeString('en-GB', { hour: '2-digit', minute: '2-digit' });


                

                const recordedDataBody = document.getElementById("recordedDataBody");
                recordedDataBody.innerHTML = '';

                weatherModel.recorded_History.records.forEach(data => {
                    const row = document.createElement("tr");

                    const dateCell = document.createElement("td");
                    dateCell.innerText = new Date(data.date).toISOString().split('T')[0];
                    row.appendChild(dateCell);

                    const timeCell = document.createElement("td");
                    timeCell.innerText = new Date(data.timestamp).toLocaleTimeString('en-GB', { hour: '2-digit', minute: '2-digit' });
                    row.appendChild(timeCell);

                    const tempCell = document.createElement("td");
                    tempCell.innerText = data.temperature;
                    row.appendChild(tempCell);

                    const descCell = document.createElement("td");
                    descCell.innerText = data.description;
                    row.appendChild(descCell);

                    const windCell = document.createElement("td");
                    windCell.innerText = data.windSpeed;
                    row.appendChild(windCell);

                    recordedDataBody.appendChild(row);
                });
            });

            connection.start().catch(err => console.error(err.toString()));
        </script>
    }
</body>
</html>
